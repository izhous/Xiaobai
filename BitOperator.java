public class BitOperator {
	public static void main(String[] args) {
		//正数的原码,补码,反码都一样,三码合一
		//按位& 得到的是运算后的补码,但是结果需要看原码,所以需要将
		//运算后的补码再转化为原码;
		System.out.println(2&3);
		
		//推导
		//1.先得到 -2的原码,  10000000 00000000 00000000 00000010
		//2. -2的反码:负数的反码是除了第一位符号位,其余都是0和1 对换
		// -2的反码为        11111111 11111111 11111111 11111101
		//3.-2的补码:反码+1  11111111 11111111 11111111 11111110
		//4.~-2:取反运算:所有位都是0 和1 对换
		// ~-2             00000000 00000000 00000000 00000001 (补码);
		//5.最后将~-2的补码 换成原码看结果:~-2的原码为:由于补码为正数,所以三码合一,都相同
		//~-2 原码:         00000000 00000000 00000000 00000001
		//最后将二进制原码转化为十进制数  1
		System.out.println(~-2);//1
		
		System.out.println(~2);//-3
		System.out.println(2|3);
		System.out.println(2^3);
		
		
	}
}